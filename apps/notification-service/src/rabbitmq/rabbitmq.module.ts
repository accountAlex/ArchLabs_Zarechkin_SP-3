import {
  Global,
  Module,
  Injectable,
  OnModuleInit,
  Logger,
} from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import * as amqp from 'amqplib';
import { NotificationModule } from '../notification/notification.module';
import { NotificationService } from '../notification/notification.service';

@Injectable()
export class RabbitmqService implements OnModuleInit {
  private readonly logger = new Logger(RabbitmqService.name);
  private channel!: amqp.Channel;                // –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–¥–Ω–µ–µ

  constructor(
    private readonly cfg: ConfigService,
    private readonly notifications: NotificationService,
  ) {}

  /** –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ–±—ä—è–≤–ª—è–µ–º exchange/queue –∏ –∑–∞–ø—É—Å–∫–∞–µ–º consumer */
  async onModuleInit(): Promise<void> {
    const user  = this.cfg.get<string>('RABBITMQ_USER');
    const pass  = this.cfg.get<string>('RABBITMQ_PASS');
    const host  = this.cfg.get<string>('RABBITMQ_HOST');
    const port  = this.cfg.get<number>('RABBITMQ_PORT');
    const queue = this.cfg.get<string>('RABBITMQ_QUEUE');
    const url   = `amqp://${user}:${pass}@${host}:${port}`;

    let conn: amqp.Connection | null = null;

    /* –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏, –ø–æ–∫–∞ RabbitMQ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º */
    while (!conn) {
      try {
        this.logger.log(`‚è≥  –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ RabbitMQ ‚Üí ${url}`);
        conn = await amqp.connect(url);
      } catch (err) {
        this.logger.error('‚ùå  RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å');
        await new Promise(res => setTimeout(res, 5000));
      }
    }

    /* –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ */
    this.channel = await conn.createChannel();
    await this.channel.assertExchange('user.exchange', 'topic', {
      durable: true,
    });

    await this.channel.assertQueue(queue, { durable: true });
    await this.channel.bindQueue(queue, 'user.exchange', 'user.created');

    /* –ö–æ–Ω—Å—å—é–º–µ—Ä */
    await this.channel.consume(
      queue,
      msg => {
        if (!msg) return;
        const payload = JSON.parse(msg.content.toString());
        this.logger.log(`üîî  –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ user.created: ${JSON.stringify(payload)}`);
        this.notifications.handleUserCreated(payload);
        this.channel.ack(msg);
      },
      { noAck: false },
    );

    this.logger.log(`‚úÖ  Consumer –∑–∞–ø—É—â–µ–Ω, –æ—á–µ—Ä–µ–¥—å ¬´${queue}¬ª`);
  }

 
  publishUserCreated(payload: unknown): void {
    const buf = Buffer.from(JSON.stringify(payload));
    this.channel.publish('user.exchange', 'user.created', buf, {
      persistent: true,
    });
    this.logger.log(`üì§  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ user.created: ${JSON.stringify(payload)}`);
  }
}

@Global()
@Module({
  imports: [
    ConfigModule,    
    NotificationModule, 
  ],
  providers: [RabbitmqService],
  exports:   [RabbitmqService],
})
export class RabbitmqModule {}
